#!/usr/bin/env python
from os import listdir, stat, statvfs, major, minor, readlink
from os.path import normpath
from types import SimpleNamespace
from subprocess import Popen, PIPE
from io import TextIOWrapper
from collections import defaultdict
from resource import getpagesize
import sys

PAGE_SIZE = getpagesize()

entries = {}

with open('/proc/mounts') as f:
	for line in f:
		_, mountpoint, type, _, _, _ = line.split()

		# FIXME? does anyone mmap() bind-mounted regular files?
		mountpoint = normpath(mountpoint)
		if mountpoint != '/':
			mountpoint += '/'

		if type in ('tmpfs', 'devtmpfs'):
			dev = stat(mountpoint).st_dev
			dev = 'mount-{:02x}:{:02x}'.format(
				major(dev),
				minor(dev),
			)

			if dev in entries:
				entries[dev].name += '; '
				entries[dev].name += mountpoint
			else:
				s = statvfs(mountpoint)
				size = (s.f_blocks - s.f_bfree) * s.f_bsize
				entries[dev] = SimpleNamespace(
					size = size,
					accurate = True,
					pid = type,
					ppid = 1,
					name = mountpoint,
					children = [],
				)

for p in listdir('/proc'):
	try: p = int(p)
	except: continue

	try:
		print(f'reading {p}...', end='\r')

		name = open('/proc/%d/cmdline' % p).read()
		for c in '\0\r\n\033':
			name = name.replace(c, ' ')
		if not name:
			# skip kernel thread
			continue
		ppid = None
		with open('/proc/%d/status' % p) as f:
			for line in f:
				if line.startswith('PPid:\t'):
					ppid = int(line[6:].rstrip('\n'))
					continue

		size = 0
		accurate = True
		mountpoint = None # temporary, per-region
		try:
				with open('/proc/%d/smaps' % p) as f:
					for line in f:
						line = line.split(None, 5)
						if ':' not in line[0]:
							'''
							assume region map header, like this one:
							7fbebe4b5000-7fbebe53c000 rw-s 00000000 00:2d 10701860    /dev/shm/... (deleted)

							line[5] (which can be absent) should be the path since we limited split() to 5 splits
							'''
							mountpoint = None
							if 'mount-'+line[3] in entries:
								# region is backed by file in tmpfs
								# adjust mount's memory usage so we don't count the same file regions twice
								mountpoint = 'mount-'+line[3]
						if line[0] in ('Pss:', 'SwapPss:'):
							if line[2] == 'kB':
								amount = int(line[1]) * 1024
								size += amount
								# skip devtmpfs: it usually doesn't have enough free space to host large files,
								# but it does host a bunch of device files (from /dev/zero and /dev/null
								# to /dev/snd/pcm* and even /dev/sd*) which, if mmap()-ed, would render this mountpoint
								# like it uses negative amounts or memory
								if mountpoint and entries[mountpoint].pid != 'devtmpfs':
									entries[mountpoint].size -= amount
							else:
								accurate = False
		except PermissionError:
			accurate = False
	except FileNotFoundError:
		continue
	entries[p] = SimpleNamespace(
		size = size,
		accurate = accurate,
		pid = p,
		ppid = ppid,
		name = name,
		children = [],
	)

# https://utcc.utoronto.ca/~cks/space/blog/linux/SlabinfoSlabMerging
slab_aliases = defaultdict(list)

for cache in listdir('/sys/kernel/slab'):
	try:
		parent = readlink(f'/sys/kernel/slab/{cache}')
		slab_aliases[parent].append(cache)
	except OSError: # not a symlink
		if int(open(f'/sys/kernel/slab/{cache}/reclaim_account').read()):
			# reclaimable slabs should be already covered by MemAvailable/SReclaimable
			# (although kernel currently guesstimates that some slabs will hang around because of objects in use)
			continue

		# how many slabs there is in a cache
		# split(): we're not interested in NUMA-aware statistics
		slabs = int(open(f'/sys/kernel/slab/{cache}/slabs').read().split()[0])
		# size of each slab
		slab_size = PAGE_SIZE << int(open(f'/sys/kernel/slab/{cache}/order').read())

		if not slabs:
			continue

		# how many objects there is in all slabs
		objects = int(open(f'/sys/kernel/slab/{cache}/objects').read().split()[0])
		# size of each object
		obj_size = int(open(f'/sys/kernel/slab/{cache}/object_size').read())
		# object size, but now with metadata and alignment
		obj_size_meta = int(open(f'/sys/kernel/slab/{cache}/slab_size').read())

		size = slabs * slab_size
		used = objects * obj_size
		overhead = objects * (obj_size_meta - obj_size)

		entries[f'slab-{cache}'] = SimpleNamespace(
			size = 0,
			accurate = True,
			pid = 'slab',
			ppid = 1,
			name = cache,
			children = [],
		)
		entries[f'slab-{cache}-meta'] = SimpleNamespace(
			size = overhead,
			accurate = True,
			pid = 'slab',
			ppid = f'slab-{cache}',
			name = '(slab objects)',
			children = [],
		)
		entries[f'slab-{cache}-objects'] = SimpleNamespace(
			size = used,
			accurate = True,
			pid = 'slab',
			ppid = f'slab-{cache}-meta',
			name = '(kernel objects)',
			children = [],
		)
		entries[f'slab-{cache}-free'] = SimpleNamespace(
			size = size - used,
			accurate = True,
			pid = 'slab',
			ppid = f'slab-{cache}',
			name = '(unused space)',
			children = [],
		)

for cache, aliases in slab_aliases.items():
	cache = f'slab-{cache}'
	if cache not in entries:
		continue
	entries[cache].name += ': '
	entries[cache].name += ', '.join(sorted(aliases))

for b in listdir('/sys/class/block'):
	if b.startswith('zram'):
		stat = open(f'/sys/class/block/{b}/mm_stat').read().split()

		data = int(stat[1])
		overhead = int(stat[2]) - data

		entries[b] = SimpleNamespace(
			size = overhead,
			accurate = True,
			pid = 'zram',
			ppid = 1,
			name = b,
			children = [],
		)
		entries[b + '-data'] = SimpleNamespace(
			size = data,
			accurate = True,
			pid = 'zram',
			ppid = b,
			name = f'{b} (compressed data)',
			children = [],
		)

with open('/sys/kernel/debug/dri/0/amdgpu_gem_info') as f:
	vram = defaultdict(lambda: defaultdict(int))
	pid = 1
	for line in f:
		line = line.split()
		if line[0] == 'pid':
			# pid   246108 command X:
			pid = int(line[1])
		else:
		        # 0x00000001:     19922944 byte  GTT exported as 000000007fd7a7f1 NO_CPU_ACCESS CPU_GTT_USWC
			vram[pid][line[3]] += int(line[1])

for pid in vram:
	entries[f'{pid}-amdgpu'] = SimpleNamespace(
		size = 0,
		accurate = True,
		pid = f'amdgpu',
		ppid = pid,
		name = '(amdgpu)',
		children = [],
	)
	for type, size in vram[pid].items():
		entries[f'{pid}-amdgpu-{type}'] = SimpleNamespace(
			size = size,
			accurate = True,
			pid = f'amdgpu',
			ppid = f'{pid}-amdgpu',
			name = f'({type})',
			children = [],
		)

unknown = 0
with open('/proc/meminfo') as f:
	for line in f:
		line = line.split()
		if len(line) < 3 or line[2] != 'kB':
			continue
		if line[0] in ('MemTotal:', 'SwapTotal:'):
			unknown += int(line[1]) * 1024
		if line[0] in ('MemAvailable:', 'SwapFree:'):
			unknown -= int(line[1]) * 1024
for e in entries.values():
	unknown -= e.size

entries['unknown'] = SimpleNamespace(
	size = unknown,
	accurate = True,
	pid = '?',
	ppid = 1,
	name = '(unknown)',
	children = [],
)

# build the tree
for e in entries.values():
	if e.pid == 1: continue
	entries[e.ppid].children.append(e)

def update_size_total(entry):
	for child in entry.children:
		update_size_total(child)
	entry.size_total = entry.size + sum(child.size_total for child in entry.children)
	entry.accurate_total = entry.accurate and all([child.accurate_total for child in entry.children])

update_size_total(entries[1])

# sort by size
for e in entries.values():
	e.children.sort(key = lambda e: e.size_total, reverse = True)

pid_len = max(len(str(e.pid)) for e in entries.values())

def pretty_num(n):
	for prefix in ' kMGTPE':
		if abs(n) < 1024:
			return '% 7.1f%s' % (n, prefix)
		n /= 1024

def show_subtree(entry, prefix_first='', prefix_rest=''):
	print('%s%s\033[0m %s%s\033[0m %s ' % (
		'\033[33m' if not entry.accurate else '',
		pretty_num(entry.size),
		'\033[33m' if not entry.accurate_total else '',
		pretty_num(entry.size_total),
		'% *s' % (pid_len, entry.pid),
	), end='')
	print(prefix_first + entry.name)
	for child in entry.children[:-1]:
		show_subtree(child, prefix_rest + '├ ', prefix_rest + '│ ')
	if entry.children:
		show_subtree(entry.children[-1], prefix_rest + '└ ', prefix_rest + '  ')

pager = Popen(('less', '-RS'), stdin=PIPE)
sys.stdout = TextIOWrapper(pager.stdin)

print('\033[1m', end='')
print('% 8s % 8s % *s %s' % (
	'PSS',
	'∑ PSS',
	pid_len,
	'PID',
	'command or mount point'
))
print('\033[0m', end='')
show_subtree(entries[1])

sys.stdout.close()
pager.wait()
