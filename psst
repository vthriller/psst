#!/usr/bin/env python
from os import listdir, statvfs
from collections import namedtuple

Entry = namedtuple('Entry', 'size pid ppid name children'.split())

entries = {}

for p in listdir('/proc'):
	try: p = int(p)
	except: continue

	try:
		name = open('/proc/%d/cmdline' % p).read().replace('\0', ' ')
		if not name:
			# skip kernel thread
			continue
		ppid = None
		with open('/proc/%d/status' % p) as f:
			for line in f:
				if line.startswith('PPid:\t'):
					ppid = int(line[6:].rstrip('\n'))
					continue

		n = 0
		with open('/proc/%d/smaps' % p) as f:
			for line in f:
				line = line.split()
				if line[0] in ('Pss:', 'SwapPss:'):
					n += int(line[1])
	except FileNotFoundError:
		continue
	entries[p] = Entry(n, p, ppid, name, [])

with open('/proc/mounts') as f:
	for line in f:
		_, dst, type, _, _, _ = line.split()
		if type in ('tmpfs', 'devtmpfs'):
			s = statvfs(dst)
			n = (s.f_blocks - s.f_bfree) * s.f_bsize / 1024
			entries[dst] = Entry(n, 'tmpfs', 1, dst, [])

# build the tree
for e in entries.values():
	if e.pid == 1: continue
	entries[e.ppid].children.append(e)

def show_subtree(entry, prefix_first='', prefix_rest=''):
	print('%8.1f %s ' % (
		entry.size/1024,
		'% 6s' % entry.pid,
	), end='')
	print(prefix_first + entry.name)
	for child in entry.children[:-1]:
		show_subtree(child, prefix_rest + '├ ', prefix_rest + '│ ')
	if entry.children:
		show_subtree(entry.children[-1], prefix_rest + '└ ', prefix_rest + '  ')

show_subtree(entries[1])
